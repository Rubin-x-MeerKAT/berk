#!/usr/bin/env python

"""

Driver script for the hippoxkatapult package

Given a MeerKAT captureBlockId:
    - fetch dataset from archive (mocked up at the moment)
    - unpack it set-it up in a staging directory
    - set-up an oxkat run
    - run oxkat pipeline stages, checking output after each stage
    - generate catalogs with PyBDSF
    - tidy up (keep images, catalogs, possibly MS for re-imaging)

"""

import os
import sys
import argparse
import subprocess
from hippoxkatapult import startup, archive

#------------------------------------------------------------------------------------------------------------
def makeParser():
    parser=argparse.ArgumentParser("hippoxkatapult")
    parser.add_argument("task", help="Task to run - either 'stage' (retrieve data from the archive, unpack\
                        it, and prepare it for processing), or 'process' (everything else - calibration,\
                        imaging etc.).")
    parser.add_argument("captureBlockId", help="MeerKAT observation to fetch and process\
                        (identified by captureBlockId in the MeerKAT archive).")
    return parser

#------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':

    parser=makeParser()
    args=parser.parse_args()
    captureBlockId=args.captureBlockId

    stagingDir=startup.config["stagingDir"]
    MSPath=stagingDir+os.path.sep+captureBlockId+"_sdp_l0.ms"
    topDir=os.getcwd()

    if args.task == 'stage':
        archive.fetchFromArchive(captureBlockId)
        if os.path.exists(MSPath) == False:
            tgzPath=stagingDir+os.path.sep+"%s_sdp_l0.ms.tar.gz" % (captureBlockId)
            if archive.checkUnpacking(captureBlockId) == False:
                os.system("screen -S unpack-%s -d -m tar -zxvf %s -C %s/" % (captureBlockId, tgzPath, stagingDir))
                print("unpacking %s - this will take a while" % (tgzPath))
            else:
                print("already unpacking %s" % (tgzPath))
        else:
            print("measurement set %s is already staged" % (MSPath))
        sys.exit()

    elif args.task == 'process':

        # Move the unpacked MS into the staging dir (almost instant)
        if os.path.exists(MSPath) == False:
            for p in os.walk(stagingDir+os.path.sep+"scratch"):
                if p[1][0] == os.path.split(MSPath)[-1]:
                    break
            mvCmd="mv %s/%s %s/" % (p[0], p[1][0], stagingDir)
            os.system(mvCmd)

        # Setup in processing dir
        MSProcessDir=startup.config['processingDir']+os.path.sep+captureBlockId
        if os.path.exists(MSProcessDir) == True:
            raise Exception("Processing directory %s exists and is not empty - remove it and re-run, if you're sure you don't need its contents." % (MSProcessDir))
        os.makedirs(MSProcessDir)
        os.chdir(MSProcessDir)
        os.system("ln -s %s" % (os.path.abspath(MSPath)))
        oxdirs=['setups', 'tools', 'oxkat']
        for oxdir in oxdirs:
            os.system("ln -s %s" % (startup.config['oxkatDir']+os.path.sep+oxdir))

        # 1GC - need to figure out dependency chaining to get FLAG to run automatically after this
        os.system("python setups/1GC.py hippo")
        os.system("sh submit_1GC_jobs.sh")

        # Submit oxkat jobs
        print("processing")
        import IPython
        IPython.embed()
        sys.exit()

