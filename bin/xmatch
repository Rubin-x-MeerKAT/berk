#!/usr/bin/env python

"""
Crossmatch radio sources with optical survey data.
"""

import os
import argparse
from berk import crossmatch

#--------------------------------------------------------------------------------------------------
def make_parser():
    parser=argparse.ArgumentParser("xmatch")

    parser.add_argument("catalog", help="A .fits table to crossmatch")
    parser.add_argument("-s", "--survey", help="The optical survey to be crossmatched with",
                        default='DECaLS', type=str)
    parser.add_argument("-b", "--band", help="The optical band to be used for LR calculation",
                        default='r', type=str)
    parser.add_argument("-r", "--radius", help="The search radius in arcsec", default=4.0,
                        type=float)
    parser.add_argument("-o", "--output", help="Output directory", default=os.getcwd(),
                        type=str)
    parser.add_argument("-p", "--makeplots", help="Whether to make plots.", action='store_true')
    parser.add_argument("--rad_ra_col", help="RA column of radio catalog", default='RA',
                        type=str)
    parser.add_argument("--rad_dec_col", help="Dec column of radio catalog", default='DEC',
                        type=str)
    parser.add_argument("--err_rad_ra_col", help="Error RA column of radio catalog",
                        default='E_RA', type=str)
    parser.add_argument("--err_rad_dec_col", help="Error Dec column of radio catalog",
                        default='E_DEC', type=str)

    return parser

#--------------------------------------------------------------------------------------------------
if __name__ == '__main__':

    parser=make_parser()
    args=parser.parse_args()

    radio_cat = args.catalog
    opt_survey = args.survey
    opt_mag_col = args.band
    search_radius_asec = args.radius
    make_plots=args.makeplots
    out_path = args.output
    rad_ra_col = args.rad_ra_col
    rad_dec_col = args.rad_dec_col
    e_rad_ra_col = args.err_rad_ra_col
    e_rad_dec_col = args.err_rad_dec_col

    out_subscript = '%s_%s_%sband_%sasec' %(radio_cat.replace(".fits",""), opt_survey, opt_mag_col,
                                            str(search_radius_asec).replace(".","p"))

    in_file = os.path.abspath(radio_cat)
    out_file = out_path+os.path.sep+'crossmatch_%s.fits' %out_subscript

    # Old - this has named arguments, but xmatch_opt itself doesn't, so commented out
    # cross_match_table = crossmatch.xmatch_opt(in_file, opt_survey=opt_survey,
    #                                           opt_survey_dr='DR10',
    #                                           opt_mag_col=opt_mag_col,
    #                                           search_radius_asec=search_radius_asec,
    #                                           out_path=out_path, make_plots=make_plots,
    #                                           rad_ra_col=rad_ra_col, rad_dec_col=rad_dec_col,
    #                                           e_rad_ra_col=e_rad_ra_col,
    #                                           e_rad_dec_col=e_rad_dec_col,
    #                                           out_subscript=out_subscript)
    # We have to hard code DR10 in here for now
    cross_match_table = crossmatch.xmatch_opt(in_file, opt_survey, 'DR10', opt_mag_col,
                                              search_radius_asec, out_path, make_plots,
                                              rad_ra_col, rad_dec_col, e_rad_ra_col,
                                              e_rad_dec_col, out_subscript)

    cross_match_table.write(out_file, format='fits', overwrite=True)
